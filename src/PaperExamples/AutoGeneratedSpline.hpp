#pragma once

#include <iostream>
#include <utility>


namespace AutoGeneratedSplines {

/**
 * @brief Interface class for auto generated splines.
 */
struct AutoGeneratedSpline {

  virtual ~AutoGeneratedSpline() = default;

  /** @brief Check if the spline is valid.
    * @param epsilon Epsilon value for numerical checks.
    * @warning Never use a spline without checking with this function first! */
  virtual bool isValid(const double& epsilon) const = 0;

  /** @brief Evaluate spline at given point.
    * @param x Point where to evaluate. */
  virtual double eval_dx0(const double& x) const = 0;

  /** @brief Evaluate first derivative at given point.
    * @param x Point where to evaluate. */
  virtual double eval_dx1(const double& x) const = 0;

  /** @brief Evaluate second derivative at given point.
    * @param x Point where to evaluate. */
  virtual double eval_dx2(const double& x) const = 0;

  /** @brief Evaluate third derivative at given point.
    * @param x Point where to evaluate. */
  virtual double eval_dx3(const double& x) const = 0;

  /** @brief Evaluate N-th derivative at given point.
    * @param x Point where to evaluate.
    * @param n Derivative to evalute. */
  virtual double eval_dxN(const double& x, const std::size_t& n) const = 0;

  /** @brief Get the cutoff values where the spline is (almost) 0.
    * @param epsilon Function values below are considered to be 0. */
  virtual std::pair<double, double> getCutoff(
      const double& epsilon) const = 0;

  /** @brief Check numerically if the spline in n-times continuously differentiable.
    * @param n Check upto this derivative if the spline is continuous.
    * @param epsilon Epsilon for comparison of function values.
    *
    * This function compares the left- and right-sided limit of the individual
    * polynomials at each polynomial-polynomial junction. */
  virtual bool isContinuous_dxN(const std::size_t& n, const double& epsilon) const = 0;

  /** @brief Print the parameters of the spline to the `std::ostream`.
    * @param os The output stream. */
  virtual void print(std::ostream& os) const = 0;
};

/** @brief Convenience function for spline output.
  * @param os Output stream.
  * @param spline The spline. */
inline std::ostream& operator<< (std::ostream& os, const AutoGeneratedSpline& spline)
{
  spline.print(os);
  return os;
}

} /* namespace AutoGeneratedSplines */
